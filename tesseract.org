;; -*- lexical-binding: t -*-

#+TITLE: Tesseract commands for Emacs
#+AUTHOR: Sebastian Meisel
#+DATE: <2023-05-20 Sa>
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle tesseract.el :results silent auto-tangle: yes

* Introduction

This package aims to provide a basic integration of Tesseract in Emacs. For now it provides commands extract text from bitmap PDFs from within DocView. Next step I plan is Dired integration.

It is still in *very* early development. For the moment  I have no instructions for installation, but just this literal programming documentation. Please feel free to give feedback or post issues.

Reach out to me:
 - sebastian.meisel@gmail.com
 - @sebasTEAan@emacs.ch

* General
** Header

#+BEGIN_SRC emacs-lisp
;;; tesseract.el --- Use Tesseract for OCR from within Emacs.  -*- coding: utf-8; lexical-binding: t; -*-

;; Copyright Â© 2023, by Sebastian Meisel

;; Author: Sebastian Meisel <sebastian.meisel@gmail.com>
;; Version: 0.1
;; Created:  Mai 20, 2023
;; Keywords: ocr
;; Homepage: https://github.com/SebastianMeisel/tesseract.el
;; Package-Requires: ((emacs "27.1"))
#+END_SRC

** License
#+BEGIN_SRC emacs-lisp
;;; License:

;; This file is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published
;; by the Free Software Foundation, either version 3 of the License,
;; or (at your option) any later version.
;;
;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

** Commentary

#+BEGIN_SRC emacs-lisp
;;; Commentary

;; This is a package that provides support for OCR using Tesseract from within Emacs.
;; Tesseract needs to be installed on your system first to use this package.

;; Put tesseract.el in your load-path and add (require 'tesseract) to your .emacs file.
#+END_SRC

** Customization
Define a customization group:

#+BEGIN_SRC emacs-lisp
;;; Code:


;; customization
(defgroup tesseract nil
  "Commands to use Tesseract for OCR from within Emacs."
  :group 'external)
#+END_SRC

*** Customization for default language

#+BEGIN_SRC emacs-lisp
(defcustom tesseract/default-language "eng"
"Default language used for Tesseract OCR.
 Use tesseract/list-languages to get languages available on your system."
:group 'tesseract
:type 'string)
#+END_SRC

*** End of Customization

#+BEGIN_SRC emacs-lisp
;; functions
#+END_SRC

* Check Prerequisites

To give useful error messages I check for the prerequisites and save the value in constants. 

#+BEGIN_SRC emacs-lisp
(defconst tesseract-installed-p (if (executable-find "tesseract") t nil)
  "Returns true if Tesseract is installed on the system.")

(defconst convert-installed-p (if (executable-find "convert") t nil)
  "Returns true if convert from the ImageMagick package is installed on the system.")

(defconst pdfjam-installed-p (if (executable-find "pdfjam") t nil)
  "Returns true if pdfjam is installed on the system.")
#+END_SRC

* Select language for Tesseract
** Get available languages from Tesseract

Use the =--list-langs= parameter of Tesseract to list with languages are available for OCR on the current system.

#+BEGIN_SRC emacs-lisp
(defun tesseract/list-languages ()
  "List available language packages for tesseract."
  (interactive)
  (split-string (nth 1 (split-string (shell-command-to-string "tesseract --list-langs") ":" nil))))
#+END_SRC

** DONE Change currently used language
CLOSED: [2023-05-31 Wed 21:44]

Set a variable that we can change on will.

#+BEGIN_SRC emacs-lisp
(defvar tesseract/current-language tesseract/default-language
  "Language currently used for Tesseract OCR.
   Should only be changed use tesseract/change-language")
#+END_SRC


Prompt user to select a language from options using completing-read using =tesseract/default-language= as input for options.

#+BEGIN_SRC emacs-lisp
(defun tesseract-change-language ()
  "Change the language based on the options given by tesseract/list-languages."
  (interactive)
  (let((options (tesseract/list-languages)))
    (setq tesseract/current-language (completing-read "Language:" options nil t "eng" 'tesseract/language-history)))) 
#+END_SRC

* Commands for Doc-View-Mode

First we need to require =doc-view= because we use some of it's functions:

#+BEGIN_SRC emacs-lisp
(require 'doc-view)
#+END_SRC

*** DONE OCR current page
CLOSED: [2023-05-31 Wed 21:44]

`tesseract/doc-view/ocr-current-page`  uses Tesseract OCR to extract text from a PNG image in DocView mode. Here's a summary of its functionality:

1. The function retrieves the file path of the current PNG image being viewed in DocView mode.
2. It sets the desired Tesseract language for OCR.
3. It creates or switches to a buffer named "*tesseract*" to display the OCR output.
4. The Tesseract OCR command is executed, passing the image file path and language options.
5. The extracted text is captured and displayed in the "**tesseract**" buffer.

In summary, this function enables interactive OCR extraction from a PNG image in DocView mode using Tesseract, with the resulting text shown in the "**tesseract**" buffer.

#+BEGIN_SRC emacs-lisp
(defun tesseract/doc-view/ocr-current-page ()
  "Extract text from the current PNG image in DocView mode using Tesseract OCR."
  (interactive)
  (when (not tesseract-installed-p)
    (error "Tesseract is not installed on your system."))
  (let* ((current-image (plist-get (cdr (image-mode-window-get 'image)) :file))
	(tesseract-language tesseract/current-language)) 
    (with-current-buffer (get-buffer-create "*tesseract*")
      (erase-buffer)
      (display-buffer (current-buffer))
      (call-process  "tesseract"
		     nil
		     t
		     t
		     current-image
		     "-"
		     "-l" tesseract-language))))
#+END_SRC

*** TODO OCR current slice

#+BEGIN_SRC emacs-lisp
(defun tesseract/doc-view/ocr-current-slice ()
  "Extract text from the selected slice of the current PNG image
  in DocView mode using Tesseract OCR."
  (interactive)
  (when (not tesseract-installed-p)
    (error "Tesseract is not installed on your system."))
  (when (not convert-installed-p)
    (error "ImageMagick is not installed on your system."))
  (let* ((current-image (plist-get (cdr (image-mode-window-get 'image)) :file))
	 (slice (doc-view-current-slice))
	 (resolution (int-to-string doc-view-resolution))
	 (x (int-to-string (nth 0 slice)))
	 (y (int-to-string (nth 1 slice)))
         (w (int-to-string (nth 2 slice)))
	 (h (int-to-string (nth 3 slice)))
	 (temp-image (make-temp-file "slice" nil ".png"))
	 (tesseract-language tesseract/current-language))
    (shell-command (concat "convert "
			   " -density " resolution " "
			   current-image
			   " -crop " w "x" h "+" x "+" y
			   " -density " resolution
			   " -colorspace RGB "
			   temp-image))
    (with-current-buffer (get-buffer-create "*tesseract*")
      (erase-buffer)
      (display-buffer (current-buffer))
      (call-process  "tesseract"
		     nil
		     t
		     t
		     temp-image
		     "-"
		     "-l" tesseract-language))))
#+END_SRC

*** WIP OCR whole document

This function is a variation of the last one, but it runs Tesseract on each PNG generated for the current PDF by DocView. They a kept in a temporary directory that we can get by
=doc-view--current-cache-dir=.


#+BEGIN_SRC emacs-lisp
(defun tesseract/doc-view/ocr-this-pdf ()
  "Extract text from all pages of the PDF open in DocView mode using Tesseract OCR."
  (interactive)
  (when (not tesseract-installed-p)
    (error "Tesseract is not installed on your system."))
  (let* ((cache-dir (doc-view--current-cache-dir))
	 (current-pdf (directory-files cache-dir nil "png$"))
	(tesseract-language tesseract/current-language)) 
    (with-current-buffer (get-buffer-create "*tesseract*")
      (erase-buffer)
      (display-buffer (current-buffer))
      (dolist (current-image current-pdf)
	      (call-process  "tesseract"
			     nil
			     t
			     t
			     (concat cache-dir current-image)
			     "-"
			     "-l" tesseract-language)))))
#+END_SRC

**** TODO How can I increase the density for the preview images?

* WIP Functions for Dired

First again we need to require =dired= because we use some of it's functions:

#+BEGIN_SRC emacs-lisp
(require 'dired)
#+END_SRC

** DONE Image files
CLOSED: [2023-06-02 Fr 13:09]
   Simply run Tesseract on any supported image files. Supported format are:

#+BEGIN_QUOTE
Tesseract uses the Leptonica library to read images in one of these formats:
 - PNG - requires libpng, libz
 - JPEG - requires libjpeg / libjpeg-turbo
 - TIFF - requires libtiff, libz
 - JPEG 2000 - requires libopenjp2
 - GIF - requires libgif (giflib)
 - WebP (including animated WebP) - requires libwebp
 - BMP - no library required~*~
 - PNM - no library required~*~
 ~* Except Leptonica~
---   https://github.com/tesseract-ocr/tessdoc/blob/main/InputFormats.md
#+END_QUOTE

The following function processes a list of images an runs Tesseract on them. For each file a text file with the same base name is created. I use =call-process= because (the asynchronous) =start-process= seems to cause Tesseract to crash, at least on my system. There is probably a work around, that I don't know. Help is welcome. The way it is now, you shouldn't process to many images at a time.

#+BEGIN_SRC emacs-lisp
(defun tesseract/ocr-image (images)
  "Run Tesseract OCR on each image.
  IMAGES is a list of paths to the images."
  (let ((tesseract-language tesseract/current-language))
    (dolist (current-image images)
      (call-process  "tesseract"
		     nil
		     nil
		     t
		     current-image
		     (car (split-string current-image "\\.[[:alpha:]]+$" t))
		     "-l" tesseract-language
		     "txt"
		     "quiet"))))
#+END_SRC

** DONE Process PDFs
CLOSED: [2023-06-02 Fr 13:09]
*** ERLEDIGEN Txt-Output

This function takes a PDF file path as an argument. It uses the 'convert' command from ImageMagick to convert the PDF pages into individual PNG images. The resulting images are then processed using Tesseract OCR, which extracts text from each image. The OCR results are saved in a text file with the same name as the input PDF file, but with a 'txt' extension.

During the process, the 'tesseract-language' variable is set to the value of 'tesseract/current-language'. This determines the language used by Tesseract OCR for character recognition.

The function creates a temporary directory to store the intermediate images generated during the process. It uses the 'make-temp-file' function to create a directory with a unique name. This directory is used as the working directory for executing the external commands.

After the conversion and OCR processing, the extracted text is saved in the output file using the 'write-file' function.

Note that this function assumes the presence of the 'convert' and 'tesseract' commands in the system's PATH.


#+BEGIN_SRC emacs-lisp
(defun tesseract/ocr-pdf (pdf)
  "Convert all pages of a PDF to images and process them with Tesseract OCR."
  (let* ((tesseract-language tesseract/current-language)
	 (default-directory (make-temp-file "tesseract" t nil)))
    (with-existing-directory
      (call-process "convert"
		    nil
		    "*convert*"
		    t
		    "-density" "300x300"
		    pdf
		    "-density" "300x300"
		    "-colorspace" "RGB"
		    "pdf-pages.png")
      (let ((images (directory-files default-directory nil "png$"))
	    (output-file (concat (car(split-string pdf "pdf$" t)) "txt")))
	(with-temp-buffer
	  (dolist (current-image images)
	    (call-process  "tesseract"
			   nil
			   t
			   nil
			   current-image
			   "-"
			   "-l" tesseract-language
			   "quiet"))
	  (write-file output-file))))))
#+END_SRC

*** DONE Helper function for PDF textlayer creation
CLOSED: [2023-06-02 Fr 21:31]

=tesseract/combine-images-to-text-layer-pdf= takes a list of image file paths, a directory path, and an output PDF path as inputs. It uses the Tesseract OCR (Optical Character Recognition) engine to extract text from the images and creates PDFs with a text layer. Finally, it combines these PDFs into a single PDF file.

Here's a breakdown of how the code works:

1. It starts by creating a temporary directory to store intermediate files.
2. It sets the Tesseract language to be used for OCR. The variable "tesseract/current-language" specifies the desired language.
3. It iterates over each image file path in the provided list.
4. For each image, it constructs the input image file path and the base name for the temporary PDF file.
5. It calls the external program "tesseract" using the "call-process" function to perform OCR on the image. It passes the input image, temporary PDF base, Tesseract language, and other options.
6. The OCR output is generated as a PDF file with a similar base name to the input image.
7. After processing all the images, it uses the "pdfjam" command-line tool to combine the individual PDF files into a single PDF. The "pdfjam" command is executed using "shell-command".
8. The resulting combined PDF file is then renamed to the specified output PDF path.

Overall, this code takes advantage of Tesseract OCR and other external tools to extract text from multiple images and generate a consolidated PDF file with a text layer.

#+BEGIN_SRC emacs-lisp
(defun tesseract/combine-images-to-text-layer-pdf (images path out-pdf)
  "Run Tesseract OCR on IMAGES creating PDFs with text layer and
   combine them to a single PDF.
  IMAGES is a list of image file path.
  PATH is the directory where the image files are located.
  OUT-PDF is the final PDF."
  (let ((tmp-directory (make-temp-file "tesseract-images" t))
	(tesseract-language tesseract/current-language))
  (dolist (current-image images)
    (let* ((input (concat path "/" current-image))
	   (tmp-pdf-base (concat tmp-directory "/" (car(split-string current-image "\\.png$" t)))))
      (call-process  "tesseract"
			   nil
			   "*tesseract-output*"
			   nil
			   input
			   tmp-pdf-base 
			   "-l" tesseract-language
			   "quiet"
			   "pdf")))
  (shell-command (concat "pdfjam " tmp-directory "/*.pdf$t"))
  (let ((tmp-pdf-output (car(directory-files "./" nil "pdfjam.pdf$"))))
    (rename-file tmp-pdf-output out-pdf t))))
#+END_SRC


*** Text layer in PDF

=tesseract/ocr-pdf-text-layer=  takes a PDF file as input and adds a text layer to the PDF using Tesseract OCR.

Here's a breakdown of how the code works:

It starts by creating a temporary directory to store intermediate files. The directory name is generated using the "make-temp-file" function.
It constructs the file path for the converted PDF pages. The variable "pdf-pages" represents the output file path for the converted pages in PNG format.
It calls the external program "convert" using the "call-process" function to convert the input PDF into individual PNG images. The "convert" program is typically part of the ImageMagick software suite. It sets the density to 300x300 dots per inch (dpi) and the colorspace to RGB.
After converting the PDF into PNG images, it retrieves the list of PNG files from the temporary directory using "directory-files". The "images" variable holds the list of PNG file names.
It calls the function "tesseract/combine-images-to-text-layer-pdf" to perform OCR on the PNG images and create a PDF with a text layer. It passes the list of image files, temporary directory path, and the original PDF path as arguments.
In summary, this code utilizes the "convert" program from ImageMagick to convert a PDF into individual PNG images. It then uses the "tesseract/combine-images-to-text-layer-pdf" function to perform OCR on these PNG images and generate a PDF file with a text layer added.

#+BEGIN_SRC emacs-lisp
(defun tesseract/ocr-pdf-text-layer (pdf)
  "Add a text layer to  PDF using Tesseract OCR."
  (let* ((tmp-directory (make-temp-file "tesseract" t nil))
	 (pdf-pages (concat tmp-directory "/pdf-pages.png")))
    (call-process "convert"
		    nil
		    "*convert*"
		    t
		    "-density" "300x300"
		    pdf
		    "-density" "300x300"
		    "-colorspace" "RGB"
		    pdf-pages)
      (let ((images (directory-files tmp-directory nil "png$")))
	(tesseract/combine-images-to-text-layer-pdf images tmp-directory pdf))))
#+END_SRC


*** TODO Org-mode output
The Idea is to create an Org-mode file, with a heading for each page. Maybe even include images?

** DONE Run Tesseract on marked files
CLOSED: [2023-05-31 Wed 21:48]

To filter the marked files for supported formats we first need 2 filter functions. I also defined a regexp to match images files against.

#+BEGIN_SRC emacs-lisp
(defconst tesseract-image-regexp
  "\\.\\(GIF\\|JP\\(?:E?G\\)\\|PN[GM]\\|TIFF?\\|BMP\\|gif\\|jp\\(?:e?g\\)\\|pn[gm]\\|tiff?\\|bmp\\)\\'"
  "Regular expression for image file types supported by Tesseract (Leptonica).")

(defun tesseract/dired/filter-images (file)
  "Filter marked files for supported file types.
  FILE is a file path to match."
  (string-match-p tesseract-image-regexp file))

(defun tesseract/dired/filter-pdfs (file)
  "Filter marked files for pdfs.
  FILE is a file path to match."
  (string-match-p "\\.\\(PDF\\|pdf\\)\\'" file))
#+END_SRC


=dired-get-marked-files= enables batch processing of marked files in a dired buffer using the Tesseract OCR library, either extracting text from images or adding a text layer to PDF files, depending on the provided argument.

 - The function is interactive, which means it can be invoked directly by the user.
 - It takes a single optional argument pdf-to-pdf, which is provided by the user when the command is called. If called with a C-u prefix (e.g., C-u M-x tesseract/dired/marked-to-txt), it adds a text layer to selected PDF files instead of performing OCR on them.
 - The function first retrieves the marked files in the current dired buffer that satisfy certain filtering criteria. It collects two sets of files: images using the filter function tesseract/dired/filter-images, and pdfs using the filter function tesseract/dired/filter-pdfs.
 - It then iterates over each pdf in the pdfs list. If pdf-to-pdf is t, it calls the function tesseract/ocr-pdf-text-layer on the PDF file to add a text layer. Otherwise, it calls tesseract/ocr-pdf to perform OCR on the PDF file.
 - After processing the PDF files, it calls tesseract/ocr-image on the images list to perform OCR on the images.
 - Finally, it reverts the dired buffer to reflect any changes made to the files, using (revert-buffer t t t).


#+BEGIN_SRC emacs-lisp
(defun tesseract/dired/marked-to-txt (pdf-to-pdf)
  "Run Tesseract OCR on marked files, if they are supported.
 Output to text files with the same base name.

 Call with C-u prefix to add text layer to selected PDF files instead."
  (interactive "P")
  (when (not tesseract-installed-p)
    (error "Tesseract is not installed on your system."))
  (let ((images (dired-get-marked-files
		nil
		nil
		'tesseract/dired/filter-images
		nil
		nil))
	(pdfs (dired-get-marked-files
		nil
		nil
		'tesseract/dired/filter-pdfs
		nil
		nil)))
    (dolist (pdf pdfs)
      (when (not convert-installed-p)
	(error "ImageMagick is not installed on your system."))
      (if pdf-to-pdf
	  (when (not pdfjam-installed-p)
	    (error "Pdfjam is not installed on your system."))
	  (tesseract/ocr-pdf-text-layer pdf)
	(tesseract/ocr-pdf pdf)))
    (tesseract/ocr-image images))
  (revert-buffer t t t))
  #+END_SRC


*** TODO Combine multiple images to PDF with text layer


=tesseract/dired/combine-marked-to-pdf= provides an interactive way to combine marked image files in a Dired buffer, perform OCR on them using Tesseract, and generate a PDF file with a text layer.


- The given code is a Common Lisp function named "tesseract/dired/combine-marked-to-pdf". This function is designed to be called interactively and performs the following tasks:
- It first checks if Tesseract OCR and Pdfjam are installed on the system. If either of them is not installed, it raises an error message.
- It uses the function dired-get-marked-files to obtain a list of image files that are marked in the current Dired buffer. The dired-get-marked-files function is provided by Emacs and retrieves the marked file names.
- It uses the dired-current-directory function to get the current directory path.
- It prompts the user to enter an output filename for the resulting PDF. The default filename is set to "Tesseract-Output.pdf". The user input is obtained using the read-string function.
- It calls the function tesseract/combine-images-to-text-layer-pdf with the obtained list of image files, current directory path, and output filename as arguments. This function will perform OCR on the marked images and generate a PDF with a text layer.
- After combining the images and generating the PDF, it reverts the Dired buffer to reflect the changes made.


#+BEGIN_SRC emacs-lisp
(defun tesseract/dired/combine-marked-to-pdf ()
  "Run Tesseract OCR on marked image files, if they are supported.
   Created PDFs with text-layer and combine them."
  (interactive)
  (when (not tesseract-installed-p)
    (error "Tesseract is not installed on your system."))
  (when (not pdfjam-installed-p)
    (error "Pdfjam is not installed on your system."))
  (let ((images (dired-get-marked-files
		'no-dir'
		nil
		'tesseract/dired/filter-images
		nil
		"No supported files selected."))
	 (path (dired-current-directory))
	(output-file (read-string "Output filename (PDF): " nil 'tesseract/output-file "Tesseract-Output.pdf")))
    (tesseract/combine-images-to-text-layer-pdf images path output-file))
  (revert-buffer t t t))
  #+END_SRC

* Footer

#+BEGIN_SRC emacs-lisp
(provide 'tesseract)
;;tesseract.el ends here
#+END_SRC

# Local Variables:
# jinx-languages: "en_US"
# End:
