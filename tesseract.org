;; -*- lexical-binding: t -*-
+TITLE: Tesseract commands for Emacs
#+AUTHOR: Sebastian Meisel
#+DATE: <2023-05-20 Sa>
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle tesseract.el :results silent
#+auto-tangle: yes

* Introduction

This package aims to provide a basic integration of Tesseract in Emacs. For now it provides commands extract text from bitmap PDFs from within DocView. Next step I plan is Dired integration.

It is still in *very* early development. For the moment  I have no instructions for installation, but just this literal programming documentation. Please feel free to give feedback or post issues.

Reach out to me:
 - sebastian.meisel@gmail.com
 - @sebasTEAan@emacs.ch

* General

** Header

#+BEGIN_SRC emacs-lisp
;;; tesseract.el --- Use Tesseract for OCR from within Emacs.  -*- coding: utf-8; lexical-binding: t; -*-

;; Copyright Â© 2023, by Sebastian Meisel

;; Author: Sebastian Meisel <sebastian.meisel@gmail.com>
;; Version: 0.1
;; Created:  Mai 20, 2023
;; Keywords: ocr
;; Homepage: https://github.com/SebastianMeisel/tesseract.el
;; Package-Requires: ((emacs "27.1"))
#+END_SRC

** License
#+BEGIN_SRC emacs-lisp
;;; License:

;; This file is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published
;; by the Free Software Foundation, either version 3 of the License,
;; or (at your option) any later version.
;;
;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this file.  If not, see <https://www.gnu.org/licenses/>.
#+END_SRC

** Commentary

#+BEGIN_SRC emacs-lisp
;;; Commentary

;; This is a package that provides support for OCR using Tesseract from within Emacs.
;; Tesseract needs to be installed on your system first to use this package.

;; Put tesseract.el in your load-path and add (require 'tesseract) to your .emacs file.
#+END_SRC



** Customization
Define a customization group:

#+BEGIN_SRC emacs-lisp
;;; Code:


;; customization
(defgroup tesseract nil
  "Commands to use Tesseract for OCR from within Emacs."
  :group 'external)
#+END_SRC

*** Customization for default language

#+BEGIN_SRC emacs-lisp
(defcustom tesseract/default-language "eng"
"Default language used for Tesseract OCR. Use tesseract/list-languages to get languages available on your system."
:group 'tesseract)
#+END_SRC

*** End of Customization

#+BEGIN_SRC emacs-lisp
;; functions
#+END_SRC


* Select language for Tesseract

** Get available languages from Tesseract

Use the =--list-langs= parameter of Tesseract to list with languages are available for OCR on the current system.

#+BEGIN_SRC emacs-lisp
(defun tesseract/list-languages ()
  "List available language packages for tesseract."
  (interactive)
  (split-string (nth 1 (split-string (shell-command-to-string "tesseract --list-langs") ":" nil))))
#+END_SRC



** ERLEDIGT Change currently used language
CLOSED: [2023-05-25 Do 10:11]

Set a variable that we can change on will.

#+BEGIN_SRC emacs-lisp
(setq tesseract/current-language tesseract/default-language)
#+END_SRC


Prompt user to select a language from options using completing-read using =tesseract/default-language= as input for options.

#+BEGIN_SRC emacs-lisp
(defun tesseract/change-language ()
  "Change the language based on the options given by tesseract/list-languages."
  (interactive)
  (let((options (tesseract/list-languages)))
    (setq tesseract/current-language (completing-read "Language:" options nil t "eng" 'tesseract/language-history)))) 
#+END_SRC


* Commands for Doc-View-Mode

*** ERLEDIGT OCR current page
CLOSED: [2023-05-25 Do 10:22]

`tesseract/doc-view/ocr-current-page`  uses Tesseract OCR to extract text from a PNG image in DocView mode. Here's a summary of its functionality:

1. The function retrieves the file path of the current PNG image being viewed in DocView mode.
2. It sets the desired Tesseract language for OCR.
3. It creates or switches to a buffer named "*tesseract*" to display the OCR output.
4. The Tesseract OCR command is executed, passing the image file path and language options.
5. The extracted text is captured and displayed in the "**tesseract**" buffer.

In summary, this function enables interactive OCR extraction from a PNG image in DocView mode using Tesseract, with the resulting text shown in the "**tesseract**" buffer.

#+BEGIN_SRC emacs-lisp
(defun tesseract/doc-view/ocr-current-page ()
  "Extract text from the current PNG image in DocView mode using Tesseract OCR."
  (interactive)
  (let* ((current-image (plist-get (cdr (image-mode-window-get 'image)) :file))
	(tesseract-language tesseract/current-language)) 
    (with-current-buffer (get-buffer-create "*tesseract*")
      (display-buffer (current-buffer))
      (call-process  "tesseract"
		     nil
		     t
		     t
		     current-image
		     "-"
		     "-l" tesseract-language))))
#+END_SRC

*** BEGONNEN OCR whole document

This function is a variation of the last one, but it runs Tesseract on each PNG generated for the current PDF by DocView. They a kept in a temporary directory that we can get by
=doc-view--current-cache-dir=.

**** ERLEDIGEN How can I increase the density for the preview images?

#+BEGIN_SRC emacs-lisp
(defun tesseract/doc-view/ocr-this-pdf ()
  "Extract text from all pages of the PDF open in DocView mode using Tesseract OCR."
  (interactive)
  (let* ((cache-dir (doc-view--current-cache-dir))
	 (current-pdf (directory-files cache-dir nil "png$"))
	(tesseract-language tesseract/current-language)) 
    (with-current-buffer (get-buffer-create "*tesseract*")
      (display-buffer (current-buffer))
      (dolist (current-image current-pdf)
	      (call-process  "tesseract"
			     nil
			     t
			     t
			     (concat cache-dir current-image)
			     "-"
			     "-l" tesseract-language)))))
#+END_SRC



* BEGONNEN Functions for Dired
** BEGONNEN Image files
   Simply run Tesseract on any supported image files. Supported format are:

#+BEGIN_QUOTE
Tesseract uses the Leptonica library to read images in one of these formats:
 - PNG - requires libpng, libz
 - JPEG - requires libjpeg / libjpeg-turbo
 - TIFF - requires libtiff, libz
 - JPEG 2000 - requires libopenjp2
 - GIF - requires libgif (giflib)
 - WebP (including animated WebP) - requires libwebp
 - BMP - no library required~*~
 - PNM - no library required~*~
 ~* Except Leptonica~
---   https://github.com/tesseract-ocr/tessdoc/blob/main/InputFormats.md
#+END_QUOTE

The following function processes a list of images an runs Tesseract on them. For each file a text file with the same base name is created. I use =call-process= because (the asynchronous) =start-process= seems to cause Tesseract to crash, at least on my system. There is probably a work around, that I don't know. Help is welcome. The way it is now, you shouldn't process to many images at a time.

#+BEGIN_SRC emacs-lisp
(defun tesseract/ocr-image (images)
  "Run Tesseract OCR on each image.
  
  IMAGES is a list of paths to the images."
  (let ((tesseract-language tesseract/current-language))
    (dolist (current-image images)
      (call-process  "tesseract"
		     nil
		     nil
		     t
		     current-image
		     (car (split-string current-image "\\.[[:alpha:]]+$" t))
		     "-l" tesseract-language
		     "txt"
		     "quiet"))))
#+END_SRC

** ERLEDIGEN Process PDFs
*** ERLEDIGEN Txt-Output

This function takes a PDF file path as an argument. It uses the 'convert' command from ImageMagick to convert the PDF pages into individual PNG images. The resulting images are then processed using Tesseract OCR, which extracts text from each image. The OCR results are saved in a text file with the same name as the input PDF file, but with a 'txt' extension.

During the process, the 'tesseract-language' variable is set to the value of 'tesseract/current-language'. This determines the language used by Tesseract OCR for character recognition.

The function creates a temporary directory to store the intermediate images generated during the process. It uses the 'make-temp-file' function to create a directory with a unique name. This directory is used as the working directory for executing the external commands.

After the conversion and OCR processing, the extracted text is saved in the output file using the 'write-file' function.

Note that this function assumes the presence of the 'convert' and 'tesseract' commands in the system's PATH.


#+BEGIN_SRC emacs-lisp
(defun tesseract/ocr-pdf (pdf)
  "Convert all pages of a PDF to images and process them with Tesseract OCR."
  (let* ((tesseract-language tesseract/current-language)
	 (default-directory (make-temp-file "tesseract" t nil)))
    (with-existing-directory
      (call-process "convert"
		    nil
		    "*convert*"
		    t
		    "-density" "300x300"
		    pdf
		    "-density" "300x300"
		    "-colorspace" "RGB"
		    "pdf-pages.png")
      (let ((images (directory-files default-directory nil "png$"))
	    (output-file (concat (car(split-string pdf "pdf$" t)) "txt")))
	(with-temp-buffer
	  (dolist (current-image images)
	    (call-process  "tesseract"
			   nil
			   t
			   nil
			   current-image
			   "-"
			   "-l" tesseract-language
			   "quiet"))
	  (write-file output-file))))))
#+END_SRC

*** ERLEDIGEN Text layer in PDF
Add a text layer to the existing PDF. Should I add an option to create a new file instead?

*** ERLEDIGEN Org-mode output
The Idea is to create an Org-mode file, with a heading for each page. Maybe even include images?

** Run Tesseract on marked files

To filter the marked files for supported formats we first need 2 filter functions. I also defined a regexp to match images files against.

#+BEGIN_SRC emacs-lisp
(defconst tesseract-image-regexp
  "\\.\\(GIF\\|JP\\(?:E?G\\)\\|PN[GM]\\|TIFF?\\|BMP\\|gif\\|jp\\(?:e?g\\)\\|pn[gm]\\|tiff?\\|bmp\\)\\'"
  "Regular expression for image file types supported by Tesseract (Leptonica).")

(defun tesseract/dired/filter-files (file)
  "Filter marked files for supported file types.
  FILE is a file path to match."
  (string-match-p tesseract-image-regexp file))

(defun tesseract/dired/filter-pdfs (file)
  "Filter marked files for pdfs.
  FILE is a file path to match."
  (string-match-p "\\.\\(PDF\\|pdf\\)\\'" file))
#+END_SRC


I use =dired-get-marked-files= to get the files marked in Dired, using =tesseract/dired/filter-files= to filter for supported file types.

#+BEGIN_SRC emacs-lisp
(defun tesseract/dired/marked-to-txt ()
  "Run Tesseract OCR on marked files, if they are supported.
 Output to text files with the same base name."
  (interactive)
  (let ((images (dired-get-marked-files
		nil
		nil
		'tesseract/dired/filter-images
		nil
		nil))
	(pdfs (dired-get-marked-files
		nil
		nil
		'tesseract/dired/filter-pdfs
		nil
		nil)))
    (dolist (pdf pdfs)
      (tesseract/ocr-pdf pdf))
    (tesseract/ocr-image images))
  (revert-buffer t t t))
  #+END_SRC


* Footer

#+BEGIN_SRC emacs-lisp
(provide 'tesseract)
;;tesseract.el ends here
#+END_SRC
